# -*- coding: utf-8 -*-
"""Wine Quality using Pycaret.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HqkCyAvuVfyU6nFktO4JJGPWRW-J1EO4

#Wine Quality using Pycaret
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# rename the path 
!ln -s /content/gdrive/My\ Drive/ /mydrive
!ls /mydrive

!ls /mydrive/Data_Science_Projects/Wine_Quality/data

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

path = '/mydrive/Data_Science_Projects/Wine_Quality/data/'

df = pd.read_csv(path + 'winequality.csv')
df.head(10)

df.info()

df.describe()

#correlation
corr = df.corr()

#seaborn heatmap method
plt.figure(figsize=[16,6])
sns.heatmap(data=corr, annot=True)

!install pandas profilling
!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

# import pandas profilling
from pandas_profiling import ProfileReport

# run profile
profile = ProfileReport(df, title = 'Report - Pandas Profilling', html={'style': {'full_width': True}})
profile

"""##Machine Learning"""

# rename columns
df.columns

df.rename(columns={'fixed acidity':'fixed_acidity','volatile acidity': 'volatile_acidity', 'citric acid':'citric_acid', 'residual sugar':'residual_sugar', 'free sulfur dioxide':'free_sulfur_dioxide', 'total sulfur dioxide':'total_sulfur_dioxide'}, inplace = True)

df.columns

"""###Pycaret"""

!pip install pycaret pandas shap

from pycaret.regression import *

numeric_feature = ['fixed_acidity',	'volatile_acidity',	'citric_acid',	'residual_sugar',	'chlorides',	'free_sulfur_dioxide',	'total_sulfur_dioxide',	'density',	'pH',	'sulphates',	'alcohol',	'quality']

df.columns

exp = setup(data = df, target = 'quality')

model = compare_models()

#list of models
models()

# best model 
et = create_model('et')

print(et)

turned_model = tune_model(et)

# viewing the residuals
plot_model(et)

# vizualize the error
plot_model(et, plot='error')

plot_model(et, plot='feature')

finalize_et = finalize_model(et)

save_model(finalize_et, 'model')

!ls

df.to_csv('//mydrive/Data_Science_Projects/Wine_Quality/data/data.csv', index=False)

